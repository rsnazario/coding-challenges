
class Node
	attr_reader :data
  attr_accessor :left, :right
  
  def initialize data
    @data = data
  end
end

# helper function
def array_to_tree(array, index = 0)
  return nil if index >= array.length || array[index] == 0

  node = Node.new(array[index])
  node.left = array_to_tree(array, 2 * index +1)
  node.right = array_to_tree(array, 2 * index +2)

  node
end

# helper function
def height(node)
  
  if node.nil?
    return 0
  else
    left_heigth = 1 + height(node.left)
    
    right_height = 1 + height(node.right)
    
    return left_heigth > right_height ? left_heigth : right_height
  end
end

def balanced?(node)
  return true if node.nil?
  left_height = height(node.left)
  right_height = height(node.right)
  return false if (left_height - right_height).abs > 1
  balanced?(node.left) && balanced?(node.right)
end

def balanced_tree?(array)
  root = array_to_tree(array)
	balanced?(root)
end

puts balanced_tree?([2, 7, 5, 2, 6, 0, 9, 0, 0, 5, 11, 0, 0, 4, 0])

puts balanced_tree?([1, 2, 0, 3, 4, 0, 0])
# # => false

puts balanced_tree?([1, 2, 3, 4, 5, 6, 7])
# # => true
